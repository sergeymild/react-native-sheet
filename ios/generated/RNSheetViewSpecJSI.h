/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleH.js
 */

#pragma once

#include <ReactCommon/TurboModule.h>
#include <react/bridging/Bridging.h>

namespace facebook::react {


  class JSI_EXPORT NativeSheetCxxSpecJSI : public TurboModule {
protected:
  NativeSheetCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);

public:
  virtual jsi::Object getConstants(jsi::Runtime &rt) = 0;
  virtual jsi::Object viewportSize(jsi::Runtime &rt) = 0;
  virtual void presentToast(jsi::Runtime &rt, jsi::Object params) = 0;

};

template <typename T>
class JSI_EXPORT NativeSheetCxxSpec : public TurboModule {
public:
  jsi::Value create(jsi::Runtime &rt, const jsi::PropNameID &propName) override {
    return delegate_.create(rt, propName);
  }

  std::vector<jsi::PropNameID> getPropertyNames(jsi::Runtime& runtime) override {
    return delegate_.getPropertyNames(runtime);
  }

  static constexpr std::string_view kModuleName = "Sheet";

protected:
  NativeSheetCxxSpec(std::shared_ptr<CallInvoker> jsInvoker)
    : TurboModule(std::string{NativeSheetCxxSpec::kModuleName}, jsInvoker),
      delegate_(reinterpret_cast<T*>(this), jsInvoker) {}


private:
  class Delegate : public NativeSheetCxxSpecJSI {
  public:
    Delegate(T *instance, std::shared_ptr<CallInvoker> jsInvoker) :
      NativeSheetCxxSpecJSI(std::move(jsInvoker)), instance_(instance) {

    }

    jsi::Object getConstants(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::getConstants) == 1,
          "Expected getConstants(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Object>(
          rt, &T::getConstants, jsInvoker_, instance_);
    }
    jsi::Object viewportSize(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::viewportSize) == 1,
          "Expected viewportSize(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Object>(
          rt, &T::viewportSize, jsInvoker_, instance_);
    }
    void presentToast(jsi::Runtime &rt, jsi::Object params) override {
      static_assert(
          bridging::getParameterCount(&T::presentToast) == 2,
          "Expected presentToast(...) to have 2 parameters");

      return bridging::callFromJs<void>(
          rt, &T::presentToast, jsInvoker_, instance_, std::move(params));
    }

  private:
    friend class NativeSheetCxxSpec;
    T *instance_;
  };

  Delegate delegate_;
};

} // namespace facebook::react
